////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

const { resourceLimits } = require("worker_threads")

// create array with contents of integers within given range
//  create array without contents when given same numbers as range

function range() {

}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


// should evaluate sum of array with integers
// should evaluate sum of array with negative integers
// should evaluate sum of an empty array
// should evaluate sum of array with only 0



function sum(array) {
  var total = 0

  for(var i = 0; i < array.length; i++){
      total += array[i]
  }
  return total
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// reverse an array

function reverseArray(array, output=[]) {
  for (var i = array.length - 1; i >= 0; i--){
    output.push(array[i])
  }
  return output
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////



function reverseArrayInPlace(array) {

 for (let i = 0, j = array.length - 1; i < j; i++, j--){
        let temp = array[i];
        array[i] = array[j];
        array[j] = temp;
 }

}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// converts array into list structure (object)
// [1, 2,3 ] => {value: 1, value: 2, value: 3}

function arrayToList(array) {
  var list = null;

  for (var i = array.length - 1; i >= 0; i--) {
    list = {value: array[i], rest: list};
  }
  return list;

}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// turn object list into arrays
// {value: 1, value: 2, value: 3} => [1, 2, 3 ]

function listToArray(object) {
  var newArr = [];

  for (var key in object) {
    if (object.hasOwnProperty(key)) {
      newArr.push(object[key]);
    }
  }
  
  return newArr;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////



function prepend() {

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth() {

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual() {

}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};